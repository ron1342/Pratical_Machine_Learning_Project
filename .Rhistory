g +geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, typle = "l", ylim = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonfs)
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
play()
str(diamonds)
nxt()
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes("depth", "price"))
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, prince)) + geom_boxplot() + facet_grid(. ~ cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
rm(list=ls())
set.seed(1234)
x<-rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
swirl()
library(swirl)
swirl()
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2); x <- as.numeric(hclust$merge)
y <- y[which(x<0)]; x <- x[which(x<0)]; x <- abs(x)
y <- y[order(x)]; x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang),
labels=lab[hclust$order], col=lab.col[hclust$order],
srt=90, adj=c(1,0.5), xpd=NA, ... )
}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
rm(list=ls())
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mp)
heatmap(mt)
mt
plot(denmt)
distmt
cmat
plot(cx, cy, col =  c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
plot(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrime, centers = 3)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
rm(list=ls())
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
play()
matu
matv
diag
next()
nxt()
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
myImage(svd1$u[,1:20] %*% diag(svd1$d[1:20]) %*% t(svd1$v[,1:20]))
str(svd1)
myImage(svd1$u[,1:32] %*% diag(svd1$d[1:32]) %*% t(svd1$v[,1:32]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
myImage(svd1$u[,1:20] %*% diag(svd1$d[1:20]) %*% t(svd1$v[,1:20]))
myImage(svd1$u[,1:32] %*% diag(svd1$d[1:32]) %*% t(svd1$v[,1:32]))
rm(list=ls())
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve ~ trainSpam$type))
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4]+1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
View(trainSpam)
costFunction = function(x,y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {}
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula,family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam",dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
rm(list())
list(rm())
rm(ls())
ls(rm())
rm(list=ls())
library(compositions)
install.packages("compositions")
library(compositions)
data(SimulatedAmounts)
comps <- acomp(sa.lognormals) #View data as compositions
plot(comps)                     #produces Ternary diagrams
amounts <- aplus(sa.lognormals) #view data as amounts
plot(amounts)                   #Produces Scatterplotmatrix in log-scale
plot(comps)
means(comps)
mean(comps)
mean(amounts)
dat <- comps
amapari<-read.table(header=TRUE,"/Users/Ronald/Desktop/Ph?/Research/Rodrigo/Amapari/Dados/log.txt")
green<-subset(amapari,Area=="111");
target<-subset(amapari,Area=="222");
s1<-subset(amapari,Area=="111");
s2<-subset(amapari,Area=="222");
green=log(s1);
target=log(s2);
green<-subset(amapari,Area=="111")
amapari<-read.table(header=TRUE,"/Users/Ronald/Desktop/Ph?/Research/Rodrigo/Amapari/Dados/log.txt")
green<-subset(amapari,Area=="111")
target<-subset(amapari,Area=="222")
s1<-subset(amapari,Area=="111")
s2<-subset(amapari,Area=="222")
green=log(s1)
s2<-subset(amapari,Area=="222")
green=log(s1)
target=log(s2)
boxplot(green$Ag,target$Ag,main="Boxplot Ag",names=c("Green","Target"))
x11()
boxplot(green$Al,target$Al,main="Boxplot Al",names=c("Green","Target"))
rm(list=ls())
install.packages("caret")
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
library(caret);library(kernlab);data(spam)
install(caret)
install.packages(caret)
install.packages("caret")
library(caret);library(kernlab);data(spam)
install.packages(c("BH", "DBI", "DEoptimR", "Formula", "Hmisc", "LaplacesDemon", "MASS", "Matrix", "R6", "RCurl", "RMySQL", "RSQLite", "Rcpp", "RcppArmadillo", "RcppEigen", "SparseM", "TH.data", "TTR", "XML", "acepack", "assertthat", "bayesm", "boot", "car", "chron", "cluster", "codetools", "colorspace", "crayon", "curl", "data.table", "devtools", "digest", "dplyr", "energy", "evaluate", "fields", "foreign", "formatR", "gdata", "ggthemes", "git2r", "gridExtra", "gstat", "gsubfn", "hexbin", "htmltools", "httpuv", "httr", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "memoise", "mgcv", "mnormt", "multcomp", "mvtnorm", "openssl", "pbkrtest", "proto", "psych", "quantmod", "quantreg", "rJava", "readr", "reshape2", "rmarkdown", "robustbase", "rpart", "rstudioapi", "sandwich", "scales", "sp", "spacetime", "spam", "sqldf", "stringi", "stringr", "survival", "swirl", "testthat", "tibble", "tidyr", "xts", "yaml", "zoo"))
install.packages("caret")
library("caret")
install.packages(c('ddalpha', 'recipes'))
install.packages(c('ddalpha', 'recipes'))
install.packages('caret', dependencies = TRUE)
install.packages(c("MASS", "Matrix", "RMySQL", "RSQLite", "Rcpp", "RcppArmadillo", "RcppEigen", "TTR", "XML", "car", "caret", "classInt", "cluster", "curl", "ddalpha", "devtools", "digest", "earth", "fields", "gam", "gstat", "gsubfn", "haven", "hexbin", "httpuv", "knitr", "later", "lme4", "lubridate", "mapproj", "maps", "mgcv", "mvtnorm", "openssl", "pROC", "party", "psych", "quantmod", "quantreg", "randomForest", "rlang", "rmarkdown", "rpart", "sp", "spam", "stringi", "stringr", "subselect", "survival", "testthat", "tibble", "tidyr", "tidyselect", "xts", "yaml"))
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
install.packages(c("car", "caret", "classInt", "cluster", "curl", "ddalpha", "digest", "earth", "fields", "gam", "gstat", "haven", "hexbin", "httpuv", "knitr", "later", "lme4", "lubridate", "mapproj", "maps", "MASS", "Matrix", "mgcv", "mvtnorm", "openssl", "party", "pROC", "quantreg", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "rlang", "rmarkdown", "RMySQL", "rpart", "RSQLite", "sp", "spam", "stringi", "stringr", "subselect", "survival", "testthat", "tibble", "tidyr", "tidyselect", "TTR", "XML", "xts", "yaml"))
install.packages('caret')
install.packages('recipes')
install.packages('Rcpp')
install.packages('Rcpp')
library(kernlab)
data(spam)
spam$capitalAveSq<-spam$capitalAveˆ2
spam$capitalAveSq <- spam$capitalAveˆ2
spam$capitalAveSq <- spam$capitalAve^2
View(spam)
nsv<- nearZerovar(training, saveMetrics=TRUE)
livrary(caret)
livrary(coret)
library(caret)
nsv<- nearZerovar(training, saveMetrics=TRUE)
library(ISLR)
nsv<- nearZerovar(training, saveMetrics=TRUE)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
nsv<- nearZerovar(training, saveMetrics=TRUE)
nsv<- nearZeroVar(training, saveMetrics=TRUE)
View(nsv)
nsv
library(splines)
bsBasis <- bs(training$age,df=3)
bsBasis
lm1 <- lm(wage˜bsBasis, data=training)
lm1 <- lm(wage~bsBasis, data=training)
plot(training$age, training$wage,pch=19,cex=0.5)
points(training$age, predict(lm1,newdata=training), col="red",pch=19,cex=0.5)
predict(bsBasis, age=testing$age)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-[inTrain]
training<-[inTrain,]
training<-spam[inTrain,]
testing<-spam[-inTrain,]
summary(training)
View(testing)
M <-abs(cor(training[,-58]))
View(M)
training[,]
training[,-2]
training[,-58]
View(M)
View(testing)
diag(M)<-0
which(M>0.8, arr.ind=T)
View(M)
names(spam)[c(34,32)]
plot(span[,34],spam[,32])
plot(spam[,34],spam[,32])
X = 0.71*training$num415 + 0.71*training$num857
Y = 0.71*training$num415 - 0.71*training$num857
plot(X,Y)
smallSpam <-spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type=="spam")*1+1)
prComp <-prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor, xlab="PC1", ylab="PC2")
prComp$rotation
preProc <-preProcess(log10(spam[,-58]+1), method = "pca", pcaComp = 2)
smallPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2], col=typeColor)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2], col=typeColor)
lm(rm())
rm(lm())
rm(lr())
rm(list=ls())
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
library(appliedpredictivemodeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(training)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p =3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
View(testing)
View(training)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
View(training)
plot(training$CompressiveStrength,pch=19)
cutComp <- cut2(training$CompressiveStrength,g=4)
table(cutComp)
plot(cutComp,pch=19)
qplot(cutComp,data=training)
plot(training$CompressiveStrength,pch=19)
cutComp <- cut2(training$CompressiveStrength,g=3)
table(cutComp)
p1<-qplot(training$CompressiveStrength,colour=Cement ,pch=19)
p2<-qplot(training$CompressiveStrength,colour=BlastFurnaceSlag ,pch=19)
p3<-qplot(training$CompressiveStrength,colour=FlyAsh ,pch=19)
p4<-qplot(training$CompressiveStrength,colour=Water ,pch=19)
p5<-qplot(training$CompressiveStrength,colour=Superplasticizer ,pch=19)
p6<-qplot(training$CompressiveStrength,colour=CoarseAggregate ,pch=19)
p7<-qplot(training$CompressiveStrength,colour=FineAggregate ,pch=19)
p8<-qplot(training$CompressiveStrength,colour=Age ,pch=19)
grid.arrange(p1,p2,ncol=3,nrow=2)
library(ggplot2)
grid.arrange(p1,p2,ncol=3,nrow=2)
library(ISLR)
grid.arrange(p1,p2,ncol=3,nrow=2)
library(grud)
library(grid)
grid.arrange(p1,p2,ncol=3,nrow=2)
library(gtable)
grid.arrange(p1,p2,ncol=3,nrow=2)
library(gridExtra)
grid.arrange(p1,p2,ncol=3,nrow=2)
grid.arrange(p1,p2,ncol=3)
grid.arrange(p1,p2,,p3,p4,p5,p6,p7,p8,ncol=3)
grid.arrange(p1,p2,,p3,p4,p5,p6,p7,p8,nrow=3,ncol=3)
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,nrow=3,ncol=3)
grid.arrange(c("p1,p2,p3,p4,p5,p6,p7,p8"),nrow=3,ncol=3)
grid.arrange(grobs= p1,p2,p3,p4,p5,p6,p7,p8,nrow=2,ncol=3)
grid.arrange(grobs= p1,p2,p3,p4,p5,p6,p7,p8,nrow=3,ncol=3)
grid.arrange(grobs= p1,p2,p3,p4,p5,p6,p7,p8)
grid.arrange(grobs= p1,p2,p3,p4,p5,p6,p7,p8, nrow=2)
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, nrow=2)
p1<-ggplot(training$CompressiveStrength,colour=Cement ,pch=19)
p2<-ggplot(training$CompressiveStrength,colour=BlastFurnaceSlag ,pch=19)
p3<-ggplot(training$CompressiveStrength,colour=FlyAsh ,pch=19)
p4<-ggplot(training$CompressiveStrength,colour=Water ,pch=19)
p5<-ggplot(training$CompressiveStrength,colour=Superplasticizer ,pch=19)
p6<-ggplot(training$CompressiveStrength,colour=CoarseAggregate ,pch=19)
p7<-ggplot(training$CompressiveStrength,colour=FineAggregate ,pch=19)
p8<-ggplot(training$CompressiveStrength,colour=Age ,pch=19)
p1<-qplot(training$CompressiveStrength,colour=Cement ,pch=19)
p2<-qplot(training$CompressiveStrength,colour=BlastFurnaceSlag ,pch=19)
p3<-qplot(training$CompressiveStrength,colour=FlyAsh ,pch=19)
p4<-qplot(training$CompressiveStrength,colour=Water ,pch=19)
p5<-qplot(training$CompressiveStrength,colour=Superplasticizer ,pch=19)
p6<-qqplot(training$CompressiveStrength,colour=CoarseAggregate ,pch=19)
p7<-qplot(training$CompressiveStrength,colour=FineAggregate ,pch=19)
p8<-qplot(training$CompressiveStrength,colour=Age ,pch=19)
p1
p1<-qplot(training$CompressiveStrength,colour=Cement ,pch=19,data=training)
p1
p1<-qplot(ompressiveStrength,colour=Cement ,pch=19,data=training)
p1<-qplot(CompressiveStrength,colour=Cement ,pch=19,data=training)
p1
p1<-ggplot(CompressiveStrength,colour=Cement ,pch=19,data=training)+scale_shape_identity()
p1<-ggplot(training$CompressiveStrength,colour=Cement ,pch=19,data=training)+scale_shape_identity()
p1<-qplot(training$CompressiveStrength,data=training,color=factor(Cement) ,pch=19)
p1
p1<-qplot(CompressiveStrength,data=training,color=factor(Cement) ,pch=19)
p1
p1<-qplot(seq_along(training$Age),CompressiveStrength,data=training,color=factor(Cement) ,pch=19)
p1
p1<-qplot(seq_along(training$Age),CompressiveStrength,data=training)
p1
p1<-qplot(seq_along(training$Age),CompressiveStrength,data=training,color=factor(Cement)
_
p1<-qplot(seq_along(training$Age),CompressiveStrength,data=training,color=factor(Cement))
p1
cutCement <- cut2(training$Cement,g=5)
p1<-qplot(seq_along(training$Age),CompressiveStrength,data=training,color=cutCement ,pch=19)
p1
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
install.packages("rpart.plot")
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(rpart)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
?fancyRpartPlot
??fancyRpartPlot
library(rattle)
install.packages("RGtk2")
install.packages(pgmm)
install.packages("pgmm)
"
)"
)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[, -1]
git branch
git bash
gut
git
rm(list=ls())
setwd("/Users/Ronald/Desktop/Data Science Specialization/8 - Practical Machine Learning/Project")
setwd("/Users/Ronald/Desktop/Data Science Specialization/8 - Practical Machine Learning/Peer Assignment")
knitr::opts_chunk$set(echo = TRUE)
dim(TrainD)
rm(list=ls())
library(knitr)
library(caret)
library(randomForest)
library(corrplot)
install.packages("corrplot")
rm(list=ls())
library(knitr)
library(caret)
library(randomForest)
library(corrplot)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
rm(list=ls())
library(knitr)
library(caret)
library(randomForest)
library(corrplot)
library(rpart)
library(rpart.plot)
library(rattle)
install.packages("rattle")
install.packages("RGtk2")
